<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Shadowverse Deck Builder - デッキ作成</title>
    
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: white;
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 20px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .title {
            font-size: 2.5em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .subtitle {
            font-size: 1.2em;
            color: #666;
        }
        
        .deck-builder-card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
            margin-bottom: 20px;
        }
        
        .builder-header {
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            color: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }
        
        .builder-title {
            font-size: 1.5em;
            font-weight: bold;
        }
        
        .deck-info {
            display: flex;
            gap: 20px;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .form-group label {
            font-size: 0.9em;
            opacity: 0.9;
        }
        
        .form-control {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
        }
        
        .builder-content {
            padding: 30px;
        }
        
        .save-section {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .save-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .form-field {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .form-field label {
            font-weight: 600;
            color: #2c3e50;
        }
        
        .textarea-field {
            grid-column: 1 / -1;
        }
        
        .checkbox-field {
            grid-column: 1 / -1;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .save-actions {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn-primary {
            background: #3498db;
            color: white;
        }
        
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .login-notice {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .success-message {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            text-align: center;
            color: #155724;
        }
        
        .error-message {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            text-align: center;
            color: #721c24;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .title {
                font-size: 2em;
            }
            
            .builder-header {
                flex-direction: column;
                align-items: stretch;
            }
            
            .deck-info {
                justify-content: space-between;
            }
            
            .save-form {
                grid-template-columns: 1fr;
            }
            
            .save-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">Shadowverse Deck Builder</h1>
            <p class="subtitle">Shadowverseデッキをブラウザで簡単構築</p>
        </div>
        
        <div id="app">
            <div class="deck-builder-card">
                <div class="builder-header">
                    <div class="builder-title">デッキエディター</div>
                    <div class="deck-info">
                        <div class="form-group">
                            <label>デッキ名</label>
                            <input v-model="deckTitle" type="text" class="form-control" placeholder="デッキ名を入力">
                        </div>
                        <div class="form-group">
                            <label>クラス</label>
                            <select v-model="selectedClass" class="form-control">
                                <option value="">選択してください</option>
                                <option value="elf">エルフ</option>
                                <option value="royal">ロイヤル</option>
                                <option value="witch">ウィッチ</option>
                                <option value="dragon">ドラゴン</option>
                                <option value="necromancer">ネクロマンサー</option>
                                <option value="vampire">ヴァンパイア</option>
                                <option value="bishop">ビショップ</option>
                                <option value="nemesis">ネメシス</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <div class="builder-content">
                    <!-- Vue.js Deck Builder Component will be inserted here -->
                    <deck-editor 
                        :all-cards="allCards"
                        :saved-cards="savedCards"
                        @deck-updated="onDeckUpdated"
                    ></deck-editor>
                </div>
            </div>
            
            <!-- Save Section -->
            <mt:if name="can_save">
                <div class="deck-builder-card">
                    <div class="save-section">
                        <h3>デッキを保存</h3>
                        
                        <div v-if="saveMessage" :class="saveMessageClass">
                            {{ saveMessage }}
                        </div>
                        
                        <div class="save-form">
                            <div class="form-field">
                                <label for="save-title">デッキ名</label>
                                <input v-model="deckTitle" type="text" id="save-title" class="form-control" required>
                            </div>
                            
                            <div class="form-field">
                                <label for="save-class">クラス</label>
                                <select v-model="selectedClass" id="save-class" class="form-control" required>
                                    <option value="">選択してください</option>
                                    <option value="elf">エルフ</option>
                                    <option value="royal">ロイヤル</option>
                                    <option value="witch">ウィッチ</option>
                                    <option value="dragon">ドラゴン</option>
                                    <option value="necromancer">ネクロマンサー</option>
                                    <option value="vampire">ヴァンパイア</option>
                                    <option value="bishop">ビショップ</option>
                                    <option value="nemesis">ネメシス</option>
                                </select>
                            </div>
                            
                            <div class="form-field textarea-field">
                                <label for="save-description">説明（任意）</label>
                                <textarea v-model="deckDescription" id="save-description" class="form-control" rows="3" placeholder="デッキの説明を入力してください"></textarea>
                            </div>
                            
                            <div class="checkbox-field">
                                <input v-model="isPublic" type="checkbox" id="save-public">
                                <label for="save-public">公開デッキにする（他のユーザーと共有可能）</label>
                            </div>
                        </div>
                        
                        <div class="save-actions">
                            <button @click="saveDeck" :disabled="!canSave || saving" class="btn btn-primary">
                                {{ saving ? '保存中...' : 'デッキを保存' }}
                            </button>
                            <button @click="exportDeck" class="btn btn-secondary">
                                デッキリストをエクスポート
                            </button>
                        </div>
                    </div>
                </div>
            <mt:else>
                <div class="login-notice">
                    <h3>デッキを保存するにはログインが必要です</h3>
                    <p>現在はデッキ構築のみ利用可能です。デッキを保存・共有するには <a href="/mt/mt.cgi">ログイン</a> してください。</p>
                </div>
            </mt:if>
        </div>
    </div>
    
    <script>
        const { createApp } = Vue;
        
        const app = createApp({
            data() {
                return {
                    allCards: <mt:var name="all_cards" />,
                    savedCards: [],
                    deckCards: [],
                    deckTitle: '',
                    deckDescription: '',
                    selectedClass: '',
                    isPublic: false,
                    saving: false,
                    saveMessage: '',
                    saveMessageClass: ''
                }
            },
            computed: {
                canSave() {
                    return this.deckTitle && this.selectedClass && this.deckCards.length > 0 && this.totalCards === 40;
                },
                totalCards() {
                    return this.deckCards.reduce((total, card) => total + (card.count || 0), 0);
                }
            },
            methods: {
                onDeckUpdated(deckCards) {
                    this.deckCards = deckCards;
                },
                
                async saveDeck() {
                    if (!this.canSave || this.saving) return;
                    
                    this.saving = true;
                    this.saveMessage = '';
                    
                    try {
                        const response = await fetch('/mt/mt.cgi', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                            },
                            body: new URLSearchParams({
                                __mode: 'public_deck_save',
                                title: this.deckTitle,
                                description: this.deckDescription,
                                class: this.selectedClass,
                                cards_data: JSON.stringify(this.deckCards),
                                is_public: this.isPublic ? '1' : '0'
                            })
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            this.saveMessage = 'デッキが正常に保存されました！';
                            this.saveMessageClass = 'success-message';
                            
                            if (result.share_url) {
                                this.saveMessage += ` シェアURL: ${result.share_url}`;
                            }
                        } else {
                            this.saveMessage = result.message || 'デッキの保存に失敗しました。';
                            this.saveMessageClass = 'error-message';
                        }
                    } catch (error) {
                        this.saveMessage = 'エラーが発生しました: ' + error.message;
                        this.saveMessageClass = 'error-message';
                    } finally {
                        this.saving = false;
                    }
                },
                
                exportDeck() {
                    if (this.deckCards.length === 0) {
                        alert('デッキにカードが入っていません。');
                        return;
                    }
                    
                    let deckList = `${this.deckTitle || 'Shadowverseデッキ'}\n`;
                    deckList += `クラス: ${this.getClassNameJp(this.selectedClass)}\n`;
                    deckList += `カード数: ${this.totalCards}枚\n\n`;
                    
                    // Sort cards by cost and name
                    const sortedCards = this.deckCards
                        .map(deckCard => ({
                            card: this.allCards.find(c => c.card_id === deckCard.card_id),
                            count: deckCard.count
                        }))
                        .filter(item => item.card)
                        .sort((a, b) => {
                            if (a.card.cost !== b.card.cost) return a.card.cost - b.card.cost;
                            return a.card.name.localeCompare(b.card.name);
                        });
                    
                    sortedCards.forEach(item => {
                        deckList += `${item.count}x ${item.card.name} (${item.card.cost}コスト)\n`;
                    });
                    
                    // Copy to clipboard or download
                    if (navigator.clipboard) {
                        navigator.clipboard.writeText(deckList).then(() => {
                            alert('デッキリストがクリップボードにコピーされました！');
                        });
                    } else {
                        // Fallback: create downloadable file
                        const blob = new Blob([deckList], { type: 'text/plain' });
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `${this.deckTitle || 'deck'}.txt`;
                        a.click();
                        URL.revokeObjectURL(url);
                    }
                },
                
                getClassNameJp(className) {
                    const classMap = {
                        'elf': 'エルフ',
                        'royal': 'ロイヤル',
                        'witch': 'ウィッチ',
                        'dragon': 'ドラゴン',
                        'necromancer': 'ネクロマンサー',
                        'vampire': 'ヴァンパイア',
                        'bishop': 'ビショップ',
                        'nemesis': 'ネメシス',
                        'neutral': 'ニュートラル',
                    };
                    return classMap[className] || className;
                }
            }
        });
        
        // Register DeckEditor component
        app.component('DeckEditor', {
            props: {
                allCards: {
                    type: Array,
                    default: () => []
                },
                savedCards: {
                    type: Array,
                    default: () => []
                }
            },
            emits: ['deck-updated'],
            data() {
                return {
                    searchQuery: '',
                    selectedClass: '',
                    deckCards: []
                }
            },
            template: `
                <!-- Same DeckEditor template from the Vue component -->
                <div class="sv-deck-editor">
                    <!-- Component content goes here -->
                    <p>Vue.js Deck Editor Component will be loaded here</p>
                </div>
            `,
            watch: {
                deckCards: {
                    handler(newCards) {
                        this.$emit('deck-updated', newCards);
                    },
                    deep: true
                }
            }
        });
        
        app.mount('#app');
    </script>
</body>
</html>